/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

interface nsIMobileCallForwardingOptions;
interface nsITelephonyCallInfo;

[scriptable, uuid(baa9f5f3-5cab-40e0-81e9-ae0abd917907)]
interface nsITelephonyListener : nsISupports
{
  /**
   * Called when enumeration asked by nsITelephonyService::enumerateCalls
   * is completed.
   */
  void enumerateCallStateComplete();

  /**
   * Called when nsITelephonyService is asked to enumerate the current
   * telephony call state (nsITelephonyService::enumerateCalls). This is
   * called once per call that is currently managed by the RIL.
   */
  void enumerateCallState(in nsITelephonyCallInfo info);

  /**
   * Notified when a telephony call changes state.
   */
  void callStateChanged(in unsigned long length,
                        [array, size_is(length)] in nsITelephonyCallInfo allInfo);

  /**
   * Notify when RIL receives supplementary service notification.
   *
   * @param clientId
            Indicate the RIL client, 0 ~ (number of client - 1).
   * @param callIndex
   *        Call identifier assigned by the RIL. -1 if not specified
   * @param notification
   *        One of the nsITelephonyService::NOTIFICATION_* values.
   */
  void supplementaryServiceNotification(in unsigned long clientId,
                                        in long callIndex,
                                        in unsigned short notification);

  /**
   * Called when a waiting call comes in CDMA networks.
   *
   * @param clientId
            Indicate the RIL client, 0 ~ (number of client - 1).
   * @param number
   *        Number of the other party.
   * @param numberPresentation
   *        Presentation of the call number.
   *        One of the nsITelephonyProvider::CALL_PRESENTATION_* values.
   * @param name
   *        Name of the other party.
   * @param namePresentation
   *        Presentation of the call name.
   *        One of the nsITelephonyProvider::CALL_PRESENTATION_* values.
   */
  void notifyCdmaCallWaiting(in unsigned long clientId,
                             in AString number,
                             in unsigned short numberPresentation,
                             in AString name,
                             in unsigned short namePresentation);

  /**
   * Called when RIL error occurs to creating or separating a conference call.
   *
   * @param name
   *        Error name. Possible values are addError and removeError.
   * @param message
   *        Detailed error message from RIL.
   */
  void notifyConferenceError(in AString name,
                             in AString message);

  /**
   * Called when RIL receives ringback tone event.
   *
   * @param playRingbackTone
   *        Possible values are: true, false
   */
  void notifyRingbackTone(in bool playRingbackTone);

  /**
   * Called when telephony framework receives TTY mode event.
   *
   * @param mode
   *        One of the nsITelephonyService::TTY_MODE_* values.
   */
  void notifyTtyModeReceived(in unsigned short mode);

  /**
   * Called when telephony framework receives handover failure event.
   *
   * @param mode
   *        One of the nsITelephonyService::COVERAGE_LOST_* values.
   */
  void notifyTelephonyCoverageLosing(in unsigned short type);
};

/**
 * A callback interface for handling asynchronous response.
 */
[scriptable, uuid(10662a91-cdcc-4094-9ddd-2ba37adaa924)]
interface nsITelephonyCallback : nsISupports
{
  void notifySuccess();
  void notifyError(in AString error);
};

/**
 * A callback interface for handling asynchronous response for telephony.dial.
 */
[scriptable, uuid(800588c1-18ce-495f-8da1-25844e5418b7)]
interface nsITelephonyDialCallback : nsITelephonyCallback
{
  /**
   * Called when a dial request is treated as an MMI code and it is about to
   * process the request.
   *
   * @param serviceCode
   *        MMI service code key string that defined in MMI_KS_SC_*
   */
  void notifyDialMMI(in AString serviceCode);

  /**
   * Called when a dial request is treated as a call setup and the result
   * succeeds.
   *
   * @param clientId
            Indicate the RIL client, 0 ~ (number of client - 1).
   * @param callIndex
   *        Call index from RIL.
   * @param number
   *        Dialed out phone number (ex: Temporary CLIR prefix will be removed)
   * @param isEmergecy
   *        Indicate if dial string is emergency number or not.
   * @param voiceQuality
   *        Indicate voice quality.
   * @param videoCallState
   *        Indicate video call state.
   *
   */
  void notifyDialCallSuccess(in unsigned long cliendId,
                             in unsigned long callIndex,
                             in AString number,
                             in boolean isEmergency,
                             in unsigned short voiceQuality,
                             in unsigned short videoCallState,
                             in unsigned long capabilities,
                             in unsigned short radioTech);

  /**
   * Called when a MMI code request succeeds.
   * The function should only be called after notifyDialMMI.
   */
  void notifyDialMMISuccess(in AString statusMessage);
  void notifyDialMMISuccessWithInteger(in AString statusMessage,
                                       in unsigned short aAdditionalInformation);
  void notifyDialMMISuccessWithStrings(in AString statusMessage,
                                       in unsigned long aLength,
                                       [array, size_is(aLength)] in wstring aAdditionalInformation);
  void notifyDialMMISuccessWithCallForwardingOptions(in AString statusMessage,
                                                     in unsigned long aLength,
                                                     [array, size_is(aLength)] in nsIMobileCallForwardingOptions aAdditionalInformation);

  /**
   * Called when a MMI code request fails.
   * The function should only be called after notifyDialMMI.
   */
  void notifyDialMMIError(in AString error);
  void notifyDialMMIErrorWithInfo(in AString error, in unsigned short info);
};

%{C++
#define TELEPHONY_SERVICE_CID \
  { 0x9cf8aa52, 0x7c1c, 0x4cde, { 0x97, 0x4e, 0xed, 0x2a, 0xa0, 0xe7, 0x35, 0xfa } }
#define TELEPHONY_SERVICE_CONTRACTID \
  "@mozilla.org/telephony/telephonyservice;1"
%}

/**
 * XPCOM component (in the content process) that provides the telephony
 * information.
 */
[scriptable, uuid(7d5c079c-9125-44c8-8526-6ecd0bd8752a)]
interface nsITelephonyService : nsISupports
{
  const unsigned short CALL_STATE_UNKNOWN = 0;
  const unsigned short CALL_STATE_DIALING = 1;
  const unsigned short CALL_STATE_ALERTING = 2;
  const unsigned short CALL_STATE_CONNECTED = 3;
  const unsigned short CALL_STATE_HELD = 4;
  const unsigned short CALL_STATE_DISCONNECTED = 5;
  const unsigned short CALL_STATE_INCOMING = 6;

  const unsigned short NOTIFICATION_REMOTE_HELD = 0;
  const unsigned short NOTIFICATION_REMOTE_RESUMED = 1;

  const unsigned short CALL_PRESENTATION_ALLOWED = 0;
  const unsigned short CALL_PRESENTATION_RESTRICTED = 1;
  const unsigned short CALL_PRESENTATION_UNKNOWN = 2;
  const unsigned short CALL_PRESENTATION_PAYPHONE = 3;

  const unsigned short TTY_MODE_OFF = 0;
  const unsigned short TTY_MODE_FULL = 1;
  const unsigned short TTY_MODE_HCO = 2;
  const unsigned short TTY_MODE_VCO = 3;

  const unsigned short CALL_VOICE_QUALITY_NORMAL = 0;
  const unsigned short CALL_VOICE_QUALITY_HD = 1;

  const unsigned short COVERAGE_LOST_IMS_OVER_WIFI = 0;

  /**
   * Voice telephony IR.92 & IR.94 (voide + video upgrade/downgrade)
   */
  const unsigned short CALL_TYPE_VOICE_N_VIDEO = 1;
  /**
   * IR.92 (Voice only)
   */
  const unsigned short CALL_TYPE_VOICE = 2;
  /**
   * Video telephony to support IR.92 and IR.94 (voice + video upgrade/downgrade)
   */
  const unsigned short CALL_TYPE_VIDEO_N_VOICE = 3;
  /**
   * Video telephony (audio / video two way)
   * TBD phase 2?
   */
  const unsigned short CALL_TYPE_VT = 4;
  /**
   * Video telephony (audio two way / video TX one way)
   * TBD phase 2?
   */
  const unsigned short CALL_TYPE_VT_TX = 5;
  /**
   * Video telephony (audio two way / video RX one way)
   * TBD phase 2?
   */
  const unsigned short CALL_TYPE_VT_RX = 6;
  /**
   * Video telephony (audio two way / video inactive)
   * TBD phase 2?
   */
  const unsigned short CALL_TYPE_VT_NODIR = 7;
  /**
   * VideoShare (video two way)
   * TBD phase 2?
   */
  const unsigned short CALL_TYPE_VS = 8;
  /**
   * VideoShare (video TX one way)
   * TBD phase 2?
   */
  const unsigned short CALL_TYPE_VS_TX = 9;
  /**
   * VideoShare (video RX one way)
   * TBD phase 2?
   */
  const unsigned short CALL_TYPE_VS_RX = 10;

  readonly attribute unsigned long defaultServiceId;

  /**
   * Called when a content process registers receiving unsolicited messages from
   * RadioInterfaceLayer in the chrome process. Only a content process that has
   * the 'telephony' permission is allowed to register.
   */
  void registerListener(in nsITelephonyListener listener);
  void unregisterListener(in nsITelephonyListener listener);

  /**
   * Will continue calling listener.enumerateCallState until the listener
   * returns false.
   */
  void enumerateCalls(in nsITelephonyListener listener);

  /**
   * Functionality for making and managing phone calls.
   * @param type
   *        The call type, one of nsITelephonyService:CALL_TYPE_* values.
   */
  void dial(in unsigned long clientId, in DOMString number,
            in boolean isEmergency,
            in unsigned short type,
            in nsITelephonyDialCallback callback);

  void sendTones(in unsigned long clientId, in DOMString dtmfChars,
                 in unsigned long pauseDuration, in unsigned long toneDuration,
                 in nsITelephonyCallback callback);

  void startTone(in unsigned long clientId, in DOMString dtmfChar);
  void stopTone(in unsigned long clientId);

  void answerCall(in unsigned long clientId,
                  in unsigned long callIndex,
                  in unsigned short type,
                  in nsITelephonyCallback callback);
  void rejectCall(in unsigned long clientId,
                  in unsigned long callIndex,
                  in nsITelephonyCallback callback);
  void hangUpAllCalls(in unsigned long clientId,
                      in nsITelephonyCallback callback);
  void hangUpCall(in unsigned long clientId,
                  in unsigned long callIndex,
                  in nsITelephonyCallback callback);
  void holdCall(in unsigned long clientId,
                in unsigned long callIndex,
                in nsITelephonyCallback callback);
  void resumeCall(in unsigned long clientId,
                  in unsigned long callIndex,
                  in nsITelephonyCallback callback);

  void conferenceCall(in unsigned long clientId,
                      in nsITelephonyCallback callback);
  void separateCall(in unsigned long clientId, in unsigned long callIndex,
                    in nsITelephonyCallback callback);
  void hangUpConference(in unsigned long clientId,
                        in nsITelephonyCallback callback);
  void holdConference(in unsigned long clientId,
                      in nsITelephonyCallback callback);
  void resumeConference(in unsigned long clientId,
                        in nsITelephonyCallback callback);

  /**
   * Send an USSD on existing session. It results in error if the session is
   * not existed.
   *
   * If successful, callback.notifySuccess() will be called.
   * Otherwise, callback.notifyError() will be called.
   */
  void sendUSSD(in unsigned long clientId, in DOMString ussd,
                in nsITelephonyCallback callback);

  /**
   * Cancel an existing USSD session.
   *
   * If successful, callback.notifySuccess() will be called.
   * Otherwise, callback.notifyError() will be called.
   */
  void cancelUSSD(in unsigned long cliendId, in nsITelephonyCallback callback);

  attribute bool hacMode;
  attribute bool microphoneMuted;
  attribute bool speakerEnabled;

  /**
   * Current TTY mode.
   *
   * One of the nsITelephonyService::TTY_MODE_* values.
   */
  attribute unsigned short ttyMode;
};

%{C++
template<typename T> struct already_AddRefed;

already_AddRefed<nsITelephonyService>
NS_CreateTelephonyService();
%}
